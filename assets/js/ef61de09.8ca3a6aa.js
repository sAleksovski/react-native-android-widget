"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[7386],{7640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=n(5893),r=n(1151);const s={sidebar_position:2},a="registerWidgetTaskHandler",d={id:"api/register-widget-task-handler",title:"registerWidgetTaskHandler",description:"react-native-android-widget exports a registerWidgetTaskHandler function that can be used to register a task handler that can handle widget click events, widget resize events, widget added events...",source:"@site/docs/api/register-widget-task-handler.md",sourceDirName:"api",slug:"/api/register-widget-task-handler",permalink:"/react-native-android-widget/docs/api/register-widget-task-handler",draft:!1,unlisted:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/api/register-widget-task-handler.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"default",previous:{title:"WidgetPreview",permalink:"/react-native-android-widget/docs/api/widget-preview"},next:{title:"requestWidgetUpdate",permalink:"/react-native-android-widget/docs/api/request-widget-update"}},o={},l=[{value:"Usage",id:"usage",level:2},{value:"Register widget task handler",id:"register-widget-task-handler",level:2},{value:"Register widget task handler (Expo)",id:"register-widget-task-handler-expo",level:2},{value:"Types",id:"types",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"registerwidgettaskhandler",children:"registerWidgetTaskHandler"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"react-native-android-widget"})," exports a ",(0,i.jsx)(t.code,{children:"registerWidgetTaskHandler"})," function that can be used to register a task handler that can handle widget click events, widget resize events, widget added events..."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.p,{children:"First, create a task handler function, containing:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="widget-task-handler.tsx"',children:"import React from 'react';\nimport type { WidgetTaskHandlerProps } from 'react-native-android-widget';\nimport { HelloWidget } from './HelloWidget';\n\nconst nameToWidget = {\n  // Hello will be the **name** with which we will reference our widget.\n  Hello: HelloWidget,\n};\n\nexport async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n  const widgetInfo = props.widgetInfo;\n  const Widget =\n    nameToWidget[widgetInfo.widgetName as keyof typeof nameToWidget];\n\n  switch (props.widgetAction) {\n    case 'WIDGET_ADDED':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_UPDATE':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_RESIZED':\n      props.renderWidget(<Widget />);\n      break;\n\n    case 'WIDGET_DELETED':\n      // Handle widget deleted (remove widget data if you stored it somewhere)\n      break;\n\n    case 'WIDGET_CLICK':\n      if (props.clickAction === 'play') {\n        props.renderWidget(<Widget status=\"playing\" />);\n      } else {\n        props.renderWidget(<Widget status=\"stopped\" />);\n      }\n      break;\n\n    default:\n      break;\n  }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We use ",(0,i.jsx)(t.code,{children:"nameToWidget"})," to map from the ",(0,i.jsx)(t.strong,{children:"name"})," to the component defining the widget (useful if we have multiple widgets). There are other ways to achieve this."]}),"\n",(0,i.jsx)(t.p,{children:"This file is also where you can execute regular JS code, include asynchronous operations, such as fetching data from API:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="widget-task-handler.tsx"',children:"// ...\ncase 'WIDGET_CLICK':\n  if (props.clickAction === 'refresh') {\n    const data = await fetch('https://example.com/api').then((response) => response.json());\n    props.renderWidget(<Widget title={data.title} />);\n  }\n  break;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"register-widget-task-handler",children:"Register widget task handler"}),"\n",(0,i.jsxs)(t.p,{children:["In the main ",(0,i.jsx)(t.code,{children:"index.js"})," (or ",(0,i.jsx)(t.code,{children:"index.ts"}),", ",(0,i.jsx)(t.code,{children:"index.tsx"}),") file for our app, when we register the main component, register the widget task handler."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="index.ts"',children:"import { AppRegistry } from 'react-native';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\nimport { name as appName } from './app.json';\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\nAppRegistry.registerComponent(appName, () => App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"register-widget-task-handler-expo",children:"Register widget task handler (Expo)"}),"\n",(0,i.jsxs)(t.p,{children:["If we are using Expo, there is no ",(0,i.jsx)(t.code,{children:"index.js"})," (or ",(0,i.jsx)(t.code,{children:"index.ts"}),", ",(0,i.jsx)(t.code,{children:"index.tsx"}),"), but we can create it."]}),"\n",(0,i.jsxs)(t.p,{children:["First, update ",(0,i.jsx)(t.code,{children:"package.json"})," main field to point to ",(0,i.jsx)(t.code,{children:"index.ts"})," (or ",(0,i.jsx)(t.code,{children:".js"}),") instead of ",(0,i.jsx)(t.code,{children:"node_modules/expo/AppEntry.js"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="package.json"',children:'{\n  "name": "my-expo-app",\n  "main": "index.ts",\n  ...\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Create the file, using ",(0,i.jsx)(t.code,{children:"node_modules/expo/AppEntry.js"})," as a template.\nThen import ",(0,i.jsx)(t.code,{children:"widgetTaskHandler"})," and register it."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="index.ts"',children:"import { registerRootComponent } from 'expo';\nimport { registerWidgetTaskHandler } from 'react-native-android-widget';\n\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\nregisterWidgetTaskHandler(widgetTaskHandler);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(t.p,{children:["Check the types in the ",(0,i.jsx)(t.a,{href:"/docs/public-api#registerwidgettaskhandler",children:"Public API"})," documentation"]}),"\n",(0,i.jsxs)(t.p,{children:["The widget task handler will be called with some properties, described with ",(0,i.jsx)(t.a,{href:"/docs/public-api/interfaces/WidgetTaskHandlerProps",children:"WidgetTaskHandlerProps"})]})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>a});var i=n(7294);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);