"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[322],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>g});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(i),g=r,u=m["".concat(l,".").concat(g)]||m[g]||p[g]||a;return i?n.createElement(u,o(o({ref:t},c),{},{components:i})):n.createElement(u,o({ref:t},c))}));function g(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=i[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},1835:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=i(7462),r=(i(7294),i(3905));const a={sidebar_position:3},o="ListWidget",s={unversionedId:"primitives/list-widget",id:"primitives/list-widget",title:"ListWidget",description:"Widget container that shows a scrollable list that can contain multiple items.",source:"@site/docs/primitives/list-widget.md",sourceDirName:"primitives",slug:"/primitives/list-widget",permalink:"/react-native-android-widget/docs/primitives/list-widget",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/primitives/list-widget.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"default",previous:{title:"OverlapWidget",permalink:"/react-native-android-widget/docs/primitives/overlap-widget"},next:{title:"ImageWidget",permalink:"/react-native-android-widget/docs/primitives/image-widget"}},l={},d=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"Example",id:"example",level:2}],c={toc:d};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"listwidget"},"ListWidget"),(0,r.kt)("p",null,"Widget container that shows a scrollable list that can contain multiple items."),(0,r.kt)("admonition",{title:"List item height",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Each list item must have a height of equal or less than the height of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ListWidget"),".")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {\n  ListWidget,\n  FlexWidget,\n  TextWidget,\n} from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <ListWidget\n      style={{\n        height: 'match_parent',\n        width: 'match_parent',\n        backgroundColor: '#1F3529',\n      }}\n    >\n      {Array.from({ length: 15 }).map((_, i) => (\n        <FlexWidget\n          key={i}\n          style={{\n            width: 'match_parent',\n            alignItems: 'center',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            padding: 8,\n          }}\n          clickAction=\"OPEN_URI\"\n          clickActionData={{\n            uri: `androidwidgetexample://list/list-demo/${i + 1}`,\n          }}\n        >\n          <TextWidget text={`React Native Android Widget Release 0.${i + 1}`} />\n        </FlexWidget>\n      ))}\n    </ListWidget>\n  );\n}\n")),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("p",null,"Check the props in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/public-api/interfaces/ListWidgetProps"},"Public API")," documentation"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"You can see an example widget using ",(0,r.kt)("inlineCode",{parentName:"p"},"ListWidget")," in the examples folder in the repo."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/sAleksovski/react-native-android-widget/blob/master/example/src/widgets/ListDemoWidget.tsx"},"ListDemoWidget")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"List Widget Preview",src:i(4061).Z,width:"880",height:"605"})))}p.isMDXComponent=!0},4061:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/list-0d495fe5548effb055930ecbdd3eb9ae.png"}}]);