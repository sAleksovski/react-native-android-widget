"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[9239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),k=p(n),u=a,m=k["".concat(c,".").concat(u)]||k[u]||s[u]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=k;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:5,sidebar_label:"Handling Clicks"},o="Handling Clicks",l={unversionedId:"handling-clicks",id:"handling-clicks",title:"Handling Clicks",description:"All widget primitives can be clicked, and execute some code.",source:"@site/docs/handling-clicks.md",sourceDirName:".",slug:"/handling-clicks",permalink:"/react-native-android-widget/docs/handling-clicks",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/handling-clicks.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Handling Clicks"},sidebar:"default",previous:{title:"Update Widget",permalink:"/react-native-android-widget/docs/update-widget"},next:{title:"Demo",permalink:"/react-native-android-widget/docs/demo"}},c={},p=[{value:"Special cases",id:"special-cases",level:2},{value:"Demo",id:"demo",level:2}],d={toc:p};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handling-clicks"},"Handling Clicks"),(0,a.kt)("p",null,"All widget ",(0,a.kt)("a",{parentName:"p",href:"./primitives/index"},"primitives")," can be clicked, and execute some code."),(0,a.kt)("p",null,"To add a click action to ",(0,a.kt)("inlineCode",{parentName:"p"},"FlexWidget"),", we need to pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"clickAction")," prop, and an optional ",(0,a.kt)("inlineCode",{parentName:"p"},"clickActionData")," prop. ",(0,a.kt)("inlineCode",{parentName:"p"},"clickActionData")," can be used to add additional data that we need."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { FlexWidget } from 'react-native-android-widget';\n\nexport function MyWidget() {\n  return (\n    <FlexWidget clickAction=\"MY_ACTION\" clickActionData={{ id: 0 }}>\n      ...\n    </FlexWidget>\n  );\n}\n")),(0,a.kt)("p",null,"Inside our ",(0,a.kt)("a",{parentName:"p",href:"/react-native-android-widget/docs/api/register-widget-task-handler"},"registerWidgetTaskHandler")," handler we can check for the ",(0,a.kt)("inlineCode",{parentName:"p"},"widgetAction"),", and if the ",(0,a.kt)("inlineCode",{parentName:"p"},"widgetAction")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"WIDGET_CLICK"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"props.clickAction")," will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"clickAction")," we set to the View."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export async function widgetTaskHandler(props: WidgetTaskHandlerProps) {\n  switch (props.widgetAction) {\n    case 'WIDGET_ADDED':\n      // ...;\n      break;\n\n    case 'WIDGET_UPDATE':\n      // ...;\n      break;\n\n    case 'WIDGET_RESIZED':\n      // ...;\n      break;\n\n    case 'WIDGET_DELETED':\n      // ...;\n      break;\n\n    case 'WIDGET_CLICK':\n      if (props.clickAction === 'MY_ACTION') {\n        // Do stuff when primitive with `clickAction=\"MY_ACTION\"` is clicked\n        // props.clickActionData === { id: 0 }\n      }\n      break;\n\n    default:\n      break;\n  }\n}\n")),(0,a.kt)("h2",{id:"special-cases"},"Special cases"),(0,a.kt)("p",null,"There are a few special values for ",(0,a.kt)("inlineCode",{parentName:"p"},"clickAction")," that will not emit the action,\nbut will execute the action in the background."),(0,a.kt)("p",null,"Those are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},'"OPEN_APP"')),(0,a.kt)("p",{parentName:"li"},"This ",(0,a.kt)("inlineCode",{parentName:"p"},"clickAction")," does not required ",(0,a.kt)("inlineCode",{parentName:"p"},"clickActionData"),", and if set on a section of\nthe widget it will open the application when clicked")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},'"OPEN_URI"')),(0,a.kt)("p",{parentName:"li"},"This ",(0,a.kt)("inlineCode",{parentName:"p"},"clickAction")," requires a ",(0,a.kt)("inlineCode",{parentName:"p"},"clickActionData")," that contains ",(0,a.kt)("inlineCode",{parentName:"p"},"{ uri: 'some-uri' }"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"uri")," can be a web uri (",(0,a.kt)("inlineCode",{parentName:"p"},"https://google.com"),"), or an app deep link (",(0,a.kt)("inlineCode",{parentName:"p"},"androidwidgetexample://deep-link"),")"),(0,a.kt)("p",{parentName:"li"},"For the deep link to open a screen in the app deep linking must be set up using:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/linking"},"Linking")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.expo.dev/guides/linking/"},"Expo Linking")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://expo.github.io/router/docs/features/linking"},"Expo Router"))))),(0,a.kt)("h2",{id:"demo"},"Demo"),(0,a.kt)("p",null,"All click action types are presend in the ",(0,a.kt)("a",{parentName:"p",href:"/react-native-android-widget/docs/demo#click-demo-widget-preview"},"Click Demo")," widget in the demo app."))}s.isMDXComponent=!0}}]);