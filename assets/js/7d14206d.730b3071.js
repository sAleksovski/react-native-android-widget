"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[9896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,g=c["".concat(s,".").concat(m)]||c[m]||l[m]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3},o="requestWidgetUpdate",d={unversionedId:"api/request-widget-update",id:"api/request-widget-update",title:"requestWidgetUpdate",description:"react-native-android-widget exports a requestWidgetUpdate function that can be used to request a widget update while the application is open (or with some background task).",source:"@site/docs/api/request-widget-update.md",sourceDirName:"api",slug:"/api/request-widget-update",permalink:"/react-native-android-widget/docs/api/request-widget-update",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/api/request-widget-update.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"default",previous:{title:"registerWidgetTaskHandler",permalink:"/react-native-android-widget/docs/api/register-widget-task-handler"},next:{title:"registerWidgetConfigurationScreen",permalink:"/react-native-android-widget/docs/api/register-widget-configuration-screen"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:3},{value:"Demo",id:"demo",level:3},{value:"Types",id:"types",level:2}],u={toc:p};function l(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"requestwidgetupdate"},"requestWidgetUpdate"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"react-native-android-widget")," exports a ",(0,i.kt)("inlineCode",{parentName:"p"},"requestWidgetUpdate")," function that can be used to request a widget update while the application is open (or with some background task)."),(0,i.kt)("p",null,"Since the user can add the same widget multiple times, with different sizes, ",(0,i.kt)("inlineCode",{parentName:"p"},"requestWidgetUpdate")," will cycle all widgets and allow us to redraw them."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Lets assume we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterWidget")," widget that shows a single number, which it gets as a prop."),(0,i.kt)("p",null,"If the user has added a ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterWidget")," to the home screen, then when the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterWidgetScreen")," is opened we can update the number shown on the widget on the home screen using ",(0,i.kt)("inlineCode",{parentName:"p"},"requestWidgetUpdate"),"."),(0,i.kt)("p",null,"If the user has added the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterWidget")," multiple times, ",(0,i.kt)("inlineCode",{parentName:"p"},"renderWidget")," will be called multiple times, once for each widget."),(0,i.kt)("p",null,"If the user has not added the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterWidget")," on the Android home screen, the optional callback ",(0,i.kt)("inlineCode",{parentName:"p"},"widgetNotFound")," will be called."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="CounterScreen.tsx"',title:'"CounterScreen.tsx"'},"import * as React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport { requestWidgetUpdate } from 'react-native-android-widget';\n\nimport { CounterWidget } from './CounterWidget';\n\nexport function CounterScreen() {\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    requestWidgetUpdate({\n      widgetName: 'Counter',\n      renderWidget: () => <CounterWidget count={count} />,\n      widgetNotFound: () => {\n        // Called if no widget is present on the home screen\n      }\n    });\n  }, [count]);\n\n  return (\n    <View style={styles.container}>\n      <Text>{count}</Text>\n      <Button title=\"Increment\" onPress={() => setCount(count + 1)} />\n      <Button title=\"Decrement\" onPress={() => setCount(count - 1)} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n")),(0,i.kt)("h3",{id:"demo"},"Demo"),(0,i.kt)("p",null,"Check the full code in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sAleksovski/react-native-android-widget/blob/master/example/src/screens/CounterScreen.tsx"},"Counter Screen")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"Check the types in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/public-api#requestwidgetupdate"},"Public API")," documentation"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"requestWidgetUpdate")," function should be called with the properties described with ",(0,i.kt)("a",{parentName:"p",href:"/docs/public-api/interfaces/RequestWidgetUpdateProps"},"RequestWidgetUpdateProps")))}l.isMDXComponent=!0}}]);