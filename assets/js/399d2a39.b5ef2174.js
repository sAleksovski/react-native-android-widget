"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[6573],{3905:(e,t,i)=>{i.d(t,{Zo:()=>g,kt:()=>s});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function d(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},g=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,g=d(e,["components","mdxType","originalType","parentName"]),u=c(i),s=a,f=u["".concat(l,".").concat(s)]||u[s]||p[s]||r;return i?n.createElement(f,o(o({ref:t},g),{},{components:i})):n.createElement(f,o({ref:t},g))}));function s(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=u;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var c=2;c<r;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},6073:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var n=i(7462),a=(i(7294),i(3905));const r={sidebar_position:6},o="Make Widget configurable (Optional)",d={unversionedId:"tutorial/make-widget-configurable",id:"tutorial/make-widget-configurable",title:"Make Widget configurable (Optional)",description:"In order to some of the widgets configurable, we need to create a widget configuration activity.",source:"@site/docs/tutorial/make-widget-configurable.md",sourceDirName:"tutorial",slug:"/tutorial/make-widget-configurable",permalink:"/react-native-android-widget/docs/tutorial/make-widget-configurable",draft:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/tutorial/make-widget-configurable.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"default",previous:{title:"Register widget in Expo",permalink:"/react-native-android-widget/docs/tutorial/register-widget-expo"},next:{title:"Try it out",permalink:"/react-native-android-widget/docs/tutorial/try-it-our"}},l={},c=[{value:"Add a widget configuration activity class",id:"add-a-widget-configuration-activity-class",level:2},{value:"Update the widget provider xml file for the widget",id:"update-the-widget-provider-xml-file-for-the-widget",level:2},{value:"Add widget configuration activity in AndroidManifest.xml",id:"add-widget-configuration-activity-in-androidmanifestxml",level:2},{value:"Make Widget configurable in Expo using config plugin",id:"make-widget-configurable-in-expo-using-config-plugin",level:2},{value:"Create the Widget Configuration Screen",id:"create-the-widget-configuration-screen",level:2}],g={toc:c};function p(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},g,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"make-widget-configurable-optional"},"Make Widget configurable (Optional)"),(0,a.kt)("p",null,"In order to some of the widgets configurable, we need to create a widget configuration activity."),(0,a.kt)("admonition",{title:"Note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"WIDGET_ADDED")," event will be fired as soon as the widget is added on the home screen, regardless of whether it is configurable or not. We will need to have a fallback configuration."),(0,a.kt)("p",{parentName:"admonition"},"If the configuration is cancelled when adding the widget, ",(0,a.kt)("inlineCode",{parentName:"p"},"WIDGET_DELETED")," will be fired.")),(0,a.kt)("h2",{id:"add-a-widget-configuration-activity-class"},"Add a widget configuration activity class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="android/app/src/main/java/com/yourapppackage/WidgetConfigurationActivity.java"',title:'"android/app/src/main/java/com/yourapppackage/WidgetConfigurationActivity.java"'},"package com.yourapppackage;\n\nimport com.reactnativeandroidwidget.RNWidgetConfigurationActivity;\n\npublic class WidgetConfigurationActivity extends RNWidgetConfigurationActivity {\n}\n")),(0,a.kt)("h2",{id:"update-the-widget-provider-xml-file-for-the-widget"},"Update the widget provider xml file for the widget"),(0,a.kt)("p",null,"In the widget provider we created, add ",(0,a.kt)("inlineCode",{parentName:"p"},"configure")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"widgetFeatures")," properties."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/app/src/main/res/xml/widgetprovider_hello.xml"',title:'"android/app/src/main/res/xml/widgetprovider_hello.xml"'},'<?xml version="1.0" encoding="utf-8"?>\n<appwidget-provider xmlns:android="http://schemas.android.com/apk/res/android"\n    android:minWidth="320dp"\n    android:minHeight="120dp"\n\n    android:updatePeriodMillis="0"\n\n    android:initialLayout="@layout/rn_widget"\n\n    android:previewImage="@drawable/hello_preview"\n    android:description="@string/widget_hello_description"\n\n    android:resizeMode="none"\n\n\n    android:configure="com.yourapppackage.WidgetConfigurationActivity"\n    android:widgetFeatures="reconfigurable"\n\n\n    android:widgetCategory="home_screen">\n</appwidget-provider>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"android:configure")," should reference the configuration activity we created"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"android:widgetFeatures")," can be ",(0,a.kt)("inlineCode",{parentName:"li"},"reconfigurable")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"reconfigurable|configuration_optional"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reconfigurable")," means that the widget will be configurable and the configuration activity will open as soon as the widget is added to the home screen. Its configuration can also be changed later by long-pressing the widget."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reconfigurable|configuration_optional")," means that the widget configuration can only be changed by long-pressing the widget, and the configuration activity will not open when the widget is added")))),(0,a.kt)("h2",{id:"add-widget-configuration-activity-in-androidmanifestxml"},"Add widget configuration activity in AndroidManifest.xml"),(0,a.kt)("p",null,"Finally, we need to add the widget configuration activity in ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),", add a activity"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/app/src/main/AndroidManifest.xml"',title:'"android/app/src/main/AndroidManifest.xml"'},'<manifest ...>\n  ...\n  <application\n      android:name=".MainApplication"\n      ...>\n\n      <activity\n          android:name=".MainActivity"\n          ...>\n      </activity>\n\n      <activity android:name=".WidgetConfigurationActivity"\n          android:exported="true">\n          <intent-filter>\n              <action android:name="android.appwidget.action.APPWIDGET_CONFIGURE"/>\n          </intent-filter>\n      </activity>\n  </application>\n</manifest>\n')),(0,a.kt)("p",null,"For the activity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"android:name")," myst be ",(0,a.kt)("inlineCode",{parentName:"li"},".WidgetConfigurationActivity")," (same as the Java class extending ",(0,a.kt)("inlineCode",{parentName:"li"},"RNWidgetConfigurationActivity"),")")),(0,a.kt)("h2",{id:"make-widget-configurable-in-expo-using-config-plugin"},"Make Widget configurable in Expo using config plugin"),(0,a.kt)("p",null,"If using Expo, the configuration is much simpler. We will only need to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"widgetFeatures")," property in the config plugin to ",(0,a.kt)("inlineCode",{parentName:"p"},"reconfigurable")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"reconfigurable|configuration_optional"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app.config.ts"',title:'"app.config.ts"'},"import type { ConfigContext, ExpoConfig } from 'expo/config';\nimport type { WithAndroidWidgetsParams } from 'react-native-android-widget';\n\nconst widgetConfig: WithAndroidWidgetsParams = {\n  widgets: [\n    {\n      name: 'Hello',\n      label: 'My Hello Widget',\n      minWidth: '320dp',\n      minHeight: '120dp',\n      description: 'This is my first widget',\n      previewImage: './assets/widget-preview/hello.png',\n      updatePeriodMillis: 1800000,\n\n      // This\n      widgetFeatures: 'reconfigurable',\n    },\n  ],\n};\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Expo App Name',\n  plugins: [['react-native-android-widget', widgetConfig]],\n});\n")),(0,a.kt)("h2",{id:"create-the-widget-configuration-screen"},"Create the Widget Configuration Screen"),(0,a.kt)("p",null,"For the UI of the Widget Configuration Screen in both bare React Native and Expo, see the ",(0,a.kt)("a",{parentName:"p",href:"/react-native-android-widget/docs/api/register-widget-configuration-screen"},(0,a.kt)("inlineCode",{parentName:"a"},"registerWidgetConfigurationScreen"))))}p.isMDXComponent=!0}}]);