"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[7473],{1699:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=i(5893),r=i(1151);const o={sidebar_position:5},s="registerWidgetConfigurationScreen",d={id:"api/register-widget-configuration-screen",title:"registerWidgetConfigurationScreen",description:"react-native-android-widget exports a registerWidgetConfigurationScreen function that can be used to register a widget configuration screen. When a configurable widget is added on the home screen, or reconfigured once on the home screen, the registered configuration screen will be opened.",source:"@site/docs/api/register-widget-configuration-screen.md",sourceDirName:"api",slug:"/api/register-widget-configuration-screen",permalink:"/react-native-android-widget/docs/api/register-widget-configuration-screen",draft:!1,unlisted:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/api/register-widget-configuration-screen.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"default",previous:{title:"requestWidgetUpdateById",permalink:"/react-native-android-widget/docs/api/request-widget-update-by-id"},next:{title:"Primitives",permalink:"/react-native-android-widget/docs/primitives/index"}},a={},c=[{value:"Multiple configurable widgets",id:"multiple-configurable-widgets",level:2},{value:"Usage",id:"usage",level:2},{value:"Register the widget configuration screen",id:"register-the-widget-configuration-screen",level:2},{value:"Register widget task handler (Expo)",id:"register-widget-task-handler-expo",level:2},{value:"Types",id:"types",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"registerwidgetconfigurationscreen",children:"registerWidgetConfigurationScreen"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"react-native-android-widget"})," exports a ",(0,t.jsx)(n.code,{children:"registerWidgetConfigurationScreen"})," function that can be used to register a widget configuration screen. When a configurable widget is added on the home screen, or reconfigured once on the home screen, the registered configuration screen will be opened."]}),"\n",(0,t.jsxs)(n.p,{children:["The user can cancel the configuration (by calling ",(0,t.jsx)(n.code,{children:"setResult('cancel')"}),").\nIf the widget was just added it will be removed from the home screen, otherwise just the conifuguration will be canceled and the widget will remain as is."]}),"\n",(0,t.jsx)(n.p,{children:"If the user changes some configuration and wants to add the widget, we will need to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"renderWidget"})," to update the widget with the new configuration"]}),"\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"setResult('ok')"})," to indicate that the configuration is done and the screen can be closed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"multiple-configurable-widgets",children:"Multiple configurable widgets"}),"\n",(0,t.jsxs)(n.p,{children:["If we have multiple configurable widgets, they will share the same configuration screen,\nbut we can check which widget is configured by the ",(0,t.jsx)(n.code,{children:"widgetInfo"})," prop and show different UI depending on the widget."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"First, create a widget configuration component, containing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="WidgetConfigurationScreen.tsx"',children:"import React from 'react';\nimport type { WidgetConfigurationScreenProps } from 'react-native-android-widget';\nimport { ConfigurableWidget } from './ConfigurableWidget';\n\nexport function WidgetConfigurationScreen({\n  widgetInfo,\n  setResult,\n  renderWidget,\n}: WidgetConfigurationScreenProps) {\n  // Here we can define the UI for configuring the widget\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"register-the-widget-configuration-screen",children:"Register the widget configuration screen"}),"\n",(0,t.jsxs)(n.p,{children:["In the main ",(0,t.jsx)(n.code,{children:"index.js"})," (or ",(0,t.jsx)(n.code,{children:"index.ts"}),", ",(0,t.jsx)(n.code,{children:"index.tsx"}),") file for our app, when we register the main component, register the widget configuration screen."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.ts"',children:"import { AppRegistry } from 'react-native';\nimport {\n  registerWidgetConfigurationScreen,\n  registerWidgetTaskHandler,\n} from 'react-native-android-widget';\nimport { name as appName } from './app.json';\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\nimport { WidgetConfigurationScreen } from './WidgetConfigurationScreen';\n\nAppRegistry.registerComponent(appName, () => App);\nregisterWidgetTaskHandler(widgetTaskHandler);\nregisterWidgetConfigurationScreen(WidgetConfigurationScreen);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"register-widget-task-handler-expo",children:"Register widget task handler (Expo)"}),"\n",(0,t.jsxs)(n.p,{children:["If we are using Expo, there is no ",(0,t.jsx)(n.code,{children:"index.js"})," (or ",(0,t.jsx)(n.code,{children:"index.ts"}),", ",(0,t.jsx)(n.code,{children:"index.tsx"}),"), but we can create it."]}),"\n",(0,t.jsxs)(n.p,{children:["First, update ",(0,t.jsx)(n.code,{children:"package.json"})," main field to point to ",(0,t.jsx)(n.code,{children:"index.ts"})," (or ",(0,t.jsx)(n.code,{children:".js"}),") instead of ",(0,t.jsx)(n.code,{children:"node_modules/expo/AppEntry.js"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="package.json"',children:'{\n  "name": "my-expo-app",\n  "main": "index.ts",\n  ...\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Create the file, using ",(0,t.jsx)(n.code,{children:"node_modules/expo/AppEntry.js"})," as a template.\nThen import ",(0,t.jsx)(n.code,{children:"widgetTaskHandler"})," and register it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.ts"',children:"import { registerRootComponent } from 'expo';\nimport {\n  registerWidgetConfigurationScreen,\n  registerWidgetTaskHandler,\n} from 'react-native-android-widget';\n\nimport App from './App';\nimport { widgetTaskHandler } from './widget-task-handler';\nimport { WidgetConfigurationScreen } from './WidgetConfigurationScreen';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\nregisterWidgetTaskHandler(widgetTaskHandler);\nregisterWidgetConfigurationScreen(WidgetConfigurationScreen);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,t.jsxs)(n.p,{children:["Check the types in the ",(0,t.jsx)(n.a,{href:"/docs/public-api#registerwidgetconfigurationscreen",children:"Public API"})," documentation"]}),"\n",(0,t.jsxs)(n.p,{children:["The widget configuration screen has some properties, described with ",(0,t.jsx)(n.a,{href:"/docs/public-api/interfaces/WidgetConfigurationScreenProps",children:"WidgetConfigurationScreenProps"})]})]})}function l(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>s});var t=i(7294);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);