"use strict";(self.webpackChunkreact_native_android_widget_docs=self.webpackChunkreact_native_android_widget_docs||[]).push([[2894],{2880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(5893),d=n(1151);const s={sidebar_position:4},r="requestWidgetUpdateById",a={id:"api/request-widget-update-by-id",title:"requestWidgetUpdateById",description:"react-native-android-widget exports a requestWidgetUpdateById function that can be used to request a widget update while the application is open (or with some background task) for a single widget with known id.",source:"@site/docs/api/request-widget-update-by-id.md",sourceDirName:"api",slug:"/api/request-widget-update-by-id",permalink:"/react-native-android-widget/docs/api/request-widget-update-by-id",draft:!1,unlisted:!1,editUrl:"https://github.com/sAleksovski/react-native-android-widget/tree/master/docs/docs/api/request-widget-update-by-id.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"default",previous:{title:"requestWidgetUpdate",permalink:"/react-native-android-widget/docs/api/request-widget-update"},next:{title:"registerWidgetConfigurationScreen",permalink:"/react-native-android-widget/docs/api/register-widget-configuration-screen"}},o={},c=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:3},{value:"Types",id:"types",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"requestwidgetupdatebyid",children:"requestWidgetUpdateById"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"react-native-android-widget"})," exports a ",(0,i.jsx)(t.code,{children:"requestWidgetUpdateById"})," function that can be used to request a widget update while the application is open (or with some background task) for a single widget with known id."]}),"\n",(0,i.jsxs)(t.p,{children:["This is an alternative to ",(0,i.jsx)(t.a,{href:"/react-native-android-widget/docs/api/request-widget-update",children:(0,i.jsx)(t.code,{children:"requestWidgetUpdate"})})," and should be used in special cases when the widget id is known, and you don't want to update the other widgets with the same name."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["Lets assume we have a ",(0,i.jsx)(t.code,{children:"CounterWidget"})," widget that shows a single number, which it gets as a prop."]}),"\n",(0,i.jsxs)(t.p,{children:["If the user has added the ",(0,i.jsx)(t.code,{children:"CounterWidget"})," multiple times, ",(0,i.jsx)(t.code,{children:"requestWidgetUpdateById"})," will update only one widget which corresponds with the given ",(0,i.jsx)(t.code,{children:"widgetId"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If a widget with the given ",(0,i.jsx)(t.code,{children:"widgetId"})," does not exist, the optional callback ",(0,i.jsx)(t.code,{children:"widgetNotFound"})," will be called."]}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",metastring:'title="CounterScreen.tsx"',children:"import * as React from 'react';\nimport { Button, StyleSheet, View, Text } from 'react-native';\nimport { requestWidgetUpdateById } from 'react-native-android-widget';\n\nimport { CounterWidget } from './CounterWidget';\n\nexport function CounterScreen() {\n  const [count, setCount] = React.useState(0);\n\n  React.useEffect(() => {\n    requestWidgetUpdateById({\n      widgetName: 'Counter',\n      widgetId: 1,\n      renderWidget: () => <CounterWidget count={count} />,\n      widgetNotFound: () => {\n        // Called if no widget is present on the home screen\n      },\n    });\n  }, [count]);\n\n  return (\n    <View style={styles.container}>\n      <Text>{count}</Text>\n      <Button title=\"Increment\" onPress={() => setCount(count + 1)} />\n      <Button title=\"Decrement\" onPress={() => setCount(count - 1)} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(t.p,{children:["Check the types in the ",(0,i.jsx)(t.a,{href:"/docs/public-api#requestwidgetupdatebyid",children:"Public API"})," documentation"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"requestWidgetUpdate"})," function should be called with the properties described with ",(0,i.jsx)(t.a,{href:"/docs/public-api/interfaces/RequestWidgetUpdateByIdProps",children:"RequestWidgetUpdateByIdProps"})]})]})}function p(e={}){const{wrapper:t}={...(0,d.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(7294);const d={},s=i.createContext(d);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);